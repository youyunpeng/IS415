---
title: "In-class Exercise 3: Analytical Mapping"
date: "16 january 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Installing packages

```{r}
pacman::p_load(sf, tidyverse, tmap)
```

Bring data file into R

```{r}
NGA_wp <- read_rds("data/rds/NGA_wp.rds")
```

## Visualising functional water pumps

```{r}
p1<-tm_shape(NGA_wp) +
  tm_fill("wp_functional",
          n=10,
          style="equal",
          palette="Blues")+
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title= "Distribution of functional water point by LGAs", legend.outside = FALSE)
```

## Visualising non-functional water pumps

```{r}
p2<-tm_shape(NGA_wp) +
  tm_fill("total_wp",
          n=10,
          style="equal",
          palette="Blues")+
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title= "Distribution of total water point by LGAs", legend.outside = FALSE)
```

## Putting the two maps together

```{r}
tmap_arrange(p2, p1, nrow=1)
```

## Plotting choropleth map for rates

Mapping map rates rather than counts of things.

### Deriving Proportion of Functional Water Points and Non-FUnctional Water Points

```{r}
NGA_wp <- NGA_wp |> 
  mutate(pct_functional=wp_functional/total_wp) |> 
  mutate(pct_nonfunctional=wp_nonfunctional/total_wp)
```

### Plotting map of rate

```{r}
tm_shape(NGA_wp) +
  tm_fill("pct_functional",
          n=10,
          style="equal",
          palette="Blues", 
          legend.hist = TRUE)+
  tm_borders(lwd = 0.1,
             alpha = 1) +
  tm_layout(main.title= "Rate map of functional water point by LGAs", legend.outside = TRUE)
```

## Extreme value maps

Extreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, identifying outliers.

### Percentile map

special type of quantile map with 6 specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%.

### Data preparation

1.  exclude records with NA

```{r}
NGA_wp <- NGA_wp |> 
  drop_na()
```

2.  Creating customised classification and extracting values

```{r}
percent<- c(0, .01, .1, .5, .9, .99,1)
var <- NGA_wp["pct_functional"] |> 
  st_set_geometry(NULL)
quantile(var[,1], percent)
```

Create function to extract variable

```{r}
# creating a function to do whatever we did above so we can insert different objects to do the same thing
get.var <- function(vname, df) {
  v <- df[vname] %>%
    st_set_geometry(NULL)
    v <- unname(v[,1])
  return(v)
}
```

Plot function

```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(df) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

### Test drive the percentile mapping function

```{r}
percentmap("total_wp", NGA_wp)
```

### Box Map

box map is an augmented quartile map, with an additional lower and upper category.

```{r}
ggplot(data = NGA_wp,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()
```

#### Creating boxbreak function

```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

### Creating the get.var function

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

#### Test drive the newly created function

```{r}
var <- get.var("wp_nonfunctional", NGA_wp) 
boxbreaks(var)
```

### Creating boxmap function

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
```

```{r}
tmap_mode("plot")
boxmap("wp_nonfunctional", NGA_wp)
```

### Recode zero

```{r}
NGA_wp <- NGA_wp %>%
  mutate(wp_functional = na_if(
    total_wp, total_wp < 0))
```
