---
title: "In-class Exercise 11: Spatial Interaction Models"
date: "27 March 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Installing packages

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)

# essential packages include: sf, spdep, GWmodel, SpatialML, tidyverse
```

## Preparing data

### Importing the data into R environment

Firstly, we will import the passenger volume by origin destination bus stops data set downloaded from LTA datamall by using read_csv() of readr package.

```{r}
odbus<-read_csv("data/aspatial/origin_destination_bus_202210.csv")
```

```{r}
odbus$ORIGIN_PT_CODE<-as.factor(odbus$ORIGIN_PT_CODE)

odbus$DESTINATION_PT_CODE<-as.factor(odbus$DESTINATION_PT_CODE)
```

only interested in weekday, 7-9

```{r}
odbus7_9<-odbus |> 
  filter(DAY_TYPE == "WEEKDAY") |> 
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <=9) |> 
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) |> 
  summarise(TRIPS = sum(TOTAL_TRIPS))

write_rds(odbus7_9,
          "data/rds/odbus7_9.rds")
```

Read the odbus7_9 object

```{r}
odbus7_9<-read_rds("data/rds/odbus7_9.rds")
```

Reading geospatial data in

```{r}
busstop<-st_read(dsn="data/geospatial",
                 layer = "BusStop") |> 
  st_transform(crs=3414)

mpsz<-st_read(dsn="data/geospatial",
                 layer = "MPSZ-2019") |> 
  st_transform(crs=3414)
mpsz
```
## Combine the busstop and polygon data
```{r}
busstop_mpsz<-st_intersection(busstop, mpsz) |> 
  select(BUS_STOP_N, SUBZONE_C) |> 
  st_drop_geometry()

#sequance is important
```

```{r}
od_data<-left_join(odbus7_9, busstop_mpsz,
                   by=c("ORIGIN_PT_CODE"="BUS_STOP_N")) |> 
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```
Before we continue, it is a good practice for us to check for duplicate records.
```{r}
duplicate<-od_data |> 
  group_by_all() |> 
  filter(n()>1) |> 
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
od_data<-unique(od_data)
```

Bring in destination bus stop
```{r}
od_data<-left_join(od_data, busstop_mpsz,
                   by=c("DESTIN_BS"="BUS_STOP_N"))
```
Check for duplicates again
```{r}
duplicate2<-od_data |> 
  group_by_all() |> 
  filter(n()>1) |> 
  ungroup()
```
If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
od_data<-unique(od_data)
```

```{r}
od_data<-od_data |> 
  rename(DESTIN_SZ=SUBZONE_C) |> 
  drop_na()
```
 
It is time to save the output into an rds format

```{r}
write_rds(od_data, "data/rds/od_data.rds")

```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```
## Visualising the Geospatial Data

```{r}
tmap_mode("plot")
qtm(mpsz)
```

# Viewing the Subzone spatial file

```{r}
head(mpsz, 10)
```

# Isolating SUBZONE_C (subzone_code) into a new df
```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
head(mpsz,10)
```
## Computing Distance Matrix

```{r}
#converting to sp
mpsz_sp <- as(mpsz, "Spatial")
```

```{r}
#sp method instead of sf method
dist <- spDists(mpsz_sp)
dist
```
### Sorting the subzone name

```{r}
sz_names <- mpsz$SUBZONE_C
```
### Attaching SUZONE_C to row and column for distance matrix matching ahead

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```
### Pivoting distance value by SUBONE_C

```{r}
#melt similar to pivot longer of dplyr
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```
### Updating intra-zonal distances

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

```{r}
distPair$dist<-ifelse(distPair$dist==0,
                      50, distPair$dist)
```
The code chunk below is used to rename the origin and destination fields.

```{r}
distPair<-distPair |> 
  rename(orig=Var1,
         dest=Var2)
```

```{r}
flow_data<-od_data |> 
  group_by(ORIGIN_SZ, DESTIN_SZ) |> 
  summarise(TRIPS=sum(TRIPS))
```
Bring in pop data
```{r}
pop<-read_csv("data/aspatial/pop.csv")
```
```{r}
pop<-pop |> 
  left_join(mpsz,
            by=c("PA"= "PLN_AREA_N",
                       "SZ"="SUBZONE_N")) |> 
  select(1:6) |> 
  rename(SZ_NAME=SZ,
         SZ=SUBZONE_C)
```

```{r}
flow_data1<-flow_data |> 
  left_join(distPair,
            by=c("ORIGIN_SZ" = "orig",
                 "DESTIN_SZ"="dest"))
```

Origin
```{r}
flow_data1<-flow_data1 |> 
  left_join(pop,
            by = c(ORIGIN_SZ="SZ")) |> 
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) |> 
  select(-c(PA, SZ_NAME))
```

Destination
```{r}
flow_data1<-flow_data1 |> 
  left_join(pop,
            by = c(DESTIN_SZ="SZ")) |> 
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) |> 
  select(-c(PA, SZ_NAME))
```

