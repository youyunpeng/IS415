---
title: "In-class Exercise 9: Geographically Weighted Random Forest"
date: "13 March 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Installing packages

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse, tmap, ggpubr, olsrr, devtools, tidymodels)

# essential packages include: sf, spdep, GWmodel, SpatialML, tidyverse
```

## Preparing data

### Reading data file into rds

Reading the input data sets. It is in simple feature data frames.

```{r}
mdata<-read_rds("data/aspatial/mdata.rds")
```

### Random sampling
```{r eval=FALSE}
set.seed(1234) #whenever code requires randomisation, remember to set seed
resale_split<-initial_split(mdata,
                            prop=6.5/10,)
train_data<-training(resale_split)
test_data<-testing(resale_split)
```

```{r eval=FALSE}
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```

## Computing the 

## Reading data
```{r}
train_data<- read_rds("data/model/train_data.rds")
test_data<- read_rds("data/model/test_data.rds")
```

## buidling a non spatial multiple linear regression

```{r}
price_mlr<- lm(resale_price~floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data=train_data)

summary(price_mlr)
```
```{r eval=FALSE}
write_rds(price_mlr, "data/model/price_mlr.rds")
```

## GWR predictive method
gwr method will be used to calibrate a model to predict the HDB resale prices

```{r}
train_data_sp<- as_Spatial(train_data)
train_data_sp
```

## Computing adaptive bandwidth
we can use geographically weighted method to calibrate model

## Random forst method
### Preparing coordinate data

#### Extracting coordinates data
```{r eval=FALSE}
coords<-st_coordinates(mdata)
coords_train<-st_coordinates(train_data)
coords_test<-st_coordinates(test_data)
```

Save into rds 
```{r eval=FALSE}
coords_train<-write_rds(coords_train, "data/model/coords_train.rds")
coords_test<-write_rds(coords_test, "data/model/coords_test.rds")
```

Read RDS
```{r}
coords_train<-read_rds("data/model/coords_train.rds")
coords_test<-read_rds("data/model/coords_test.rds")
```

### Dropping geometry field
Drop geometry column of the sf dataframe by using st_drop_geometry()
```{r}
train_data<-train_data |> 
  st_drop_geometry()
```

### forming model
```{r}
set.seed(1234)
rf<- ranger(resale_price~floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data=train_data)

summary(rf)
```

```{r}
print(rf)
```
Comparing the R squared, we see that model's explanatory power increases using ranger. Comparing MSE, remb to take the square root of MSE 

### Geographic random forest using grf

```{r eval=FALSE}
set.seed(1234)
gwRF_adaptive<-grf(formula = resale_price~floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,
                   dframe=train_data,
                   bw=55, # need to know how to calculate using function
                   kernel="adaptive",
                   coords=coords_train)
```
determine bandwidth: 
- use grf.bw(formula, dataset, kernel, coordinates)

results:
1. explanatory variable stats
2. predictive model stats

```{r eval=FALSE}
write_rds(gwRF_adaptive, "data/model/gwRF_adaptive.rds")
```

Read rds file into R 
```{r eval=FALSE}
gwRF_adaptive<-read_rds("data/model/gwRF_adaptive.rds")
```

## Predicting by using test data
### Preparing test data

Code chunck below will be used to combine the test data with its corresponding coordinates data.
```{r}
test_data<-cbind(test_data, coords_test) |> 
  st_drop_geometry()
```

### Predicting test data
using predict.grf()
```{r eval=FALSE}
gwRF_pred<-predict.grd(gwRF_adpative,
                       test_data,
                       x_var.name="X",
                       local.w=1, #calibrate local version
                       global.w=0)
```

plot ggplot (predicted values versus fitted model)
- compare with ols plot