{
  "hash": "bee6440a9ff945ff9dd6e2ddbe8bf273",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 3: Predicting HDB Public Housing Resale Pricies using Geographically Weighted Methods\"\ndate: \"11 March 2023\"\ndate-modified: \"2023-03-19\"\nnumber-sections: true\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\neditor: visual\n---\n\n\n## Task\n\nIn this take-home exercise, you are tasked to predict HDB resale prices at the sub-market level (i.e. HDB 3-room, HDB 4-room and HDB 5-room) for the month of January and February 2023 in Singapore. The predictive models must be built by using by using conventional OLS method and GWR methods. You are also required to compare the performance of the conventional OLS method versus the geographical weighted methods.\n\n## Installing packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, sfdep, onemapsgapi, stringr, SpatialML, devtools, tidymodels, kableExtra)\n```\n:::\n\n\nThe uses of each package installed can be found below:\n\n::: panel-tabset\n### Data Collection\n\n-   kableExtra: an extension of kable, used for table customisation\n\n-   onemapsgapi: used to query Singapore-specifif spatial data, alongside additional functionalities\n\n-   httr: used to make API calls, such as GET requests\n\n### Data Wrangling\n\n-   sf: used for importing, managing and processing geospatial data\n\n-   spdep: used to create spatial weight matrix objects, global and local spatial autocorrelation statistics and related calculations\n\n-   sfdep: builds on spdep to create sn sf and tidyverse friendly interface to the package\n\n-   tidyverse: collection of R packages designed for data wrangling\n\n-   stringr: provides a cohesive set of functions designed to make working with strings easily\n\n### Data Visualisation\n\n-   tmap: used for creating thematic maps, such as chloropleth and bubble maps\n\n### Regressions\n\n-   olsrr: used for building least square regression models\n\n-   corrplot + ggpubr: Used for multivariate data visualisation and analysis\n\n-   GWmodel: provides a collection of localised spatial statistical methods such as summary statistic, principal components analysis, discriminant analysis and various forms of GW regression\n\n-   gtsummary: provides an elegant and flexible way to create publication-ready analytical and summary tables using the **R** programming language\n\n-   devtools: used for installing any R packages which is not available in RCRAN\n\n-   SpatialML: allows for a geographically weighted random forest regression to include a function to find the optimal bandwidth\n:::\n\n### OneMapAPI: usage\n\nIn this exercise, the collection of the coordinate data of singapore-specific places can tap on the database implemented by [OneMapSg](https://www.onemap.gov.sg/main/v2/).\n\nReferencing one of our senior [Megan's](https://is415-msty.netlify.app/posts/2021-10-25-take-home-exercise-3/) work, the steps to intialise this processes is as follows:\n\n1.  Make sure you have your token value after signing up for a OneMapSG account\n2.  Search for the specified theme with search_themes(token, \"searchval\").\n3.  Check the theme status with get_theme_status(token, \"themename\")\n4.  From here, we can convert our tibble dataframe to simple features dataframe. All the themes for this project use Lat and Lng as the latitude and longitude respectively, and our project coordinates system should be in the WGS84 system, aka ESPG code 4326. Thus, `themesf <- st_as_sf(themetibble, coords=c(\"Lng\", \"Lat\"), crs=4326)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(onemapsgapi)\n\ntoken <- \"your value\"\nsearch_themes(token, \"searchval\")\nget_theme_status(token, \"themename\")\nthemetibble <- get_theme(token, \"themename\")\nthemesf <- st_as_sf(themetibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 193 × 5\n   THEMENAME                                       QUERY…¹ ICON  CATEG…² THEME…³\n   <chr>                                           <chr>   <chr> <chr>   <chr>  \n 1 MCE KPE Speed Camera                            mce_kp… icon… Commun… LAND T…\n 2 Singapore Police Force Mobile Speed Cameras     spf_msc Spee… Commun… SINGAP…\n 3 Liquor Control Zone(s) proclaimed under Liquor… liquor… Cres… Commun… SINGAP…\n 4 Singapore Police Force - 32nd ASEAN Summit Ist… as_ist… Cres… Commun… SINGAP…\n 5 Singapore Police Force - 32nd ASEAN Summit Ist… as_ist… Cres… Commun… SINGAP…\n 6 Inland Ash Scattering Gardens                   ias     circ… Enviro… NATION…\n 7 CET Centres                                     cetcen… WSQ.… Educat… SINGAP…\n 8 HDB Branches                                    hdb_br… M090… Govern… HOUSIN…\n 9 Licensed premises for petroleum products        custom… null  null    SINGAP…\n10 NParks BBQ Pits                                 nparks… null  null    NATION…\n# … with 183 more rows, and abbreviated variable names ¹​QUERYNAME, ²​CATEGORY,\n#   ³​THEME_OWNER\n```\n:::\n:::\n\n\nWith that in mind, lets move on to data collection!\n\n## Data Collection\n\nThe following data would be used for the formation of our regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialise a dataframe of our aspatial and geospatial dataset details\ndatasets <- data.frame(\n  Type=c(\"Aspatial\",\n         \"Geospatial\",\n         \n         \"Geospatial - Extracted\",\n         \"Geospatial - Extracted\",\n         \"Geospatial - Extracted\",\n         \"Geospatial - Extracted\",\n         \"Geospatial - Extracted\",\n         \"Geospatial - Extracted\",\n         \"Geospatial - Extracted\",\n         \n         \"Geospatial - Selfsourced\",\n         \"Geospatial - Selfsourced\",\n         \"Geospatial - Selfsourced\",\n         \"Geospatial - Selfsourced\",\n         \"Geospatial - Selfsourced\"),\n  \n  Name=c(\"Resale Flat Prices\",\n         \"Master Plan 2019 Subzone Boundary (Web)\",\n         \n         \"Childcare Services\",\n         \"Eldercare Services\",\n         \"Hawker Centres\",\n         \"Kindergartens\",\n         \"Parks\",\n         \"Libraries\",\n         \"Sport Facilities\",\n         \n         \"Bus Stop Locations Aug 2021\",\n         \"MRT & LRT Locations Aug 2021\",\n         \"Supermarkets\",\n         \"Shopping Mall SVY21 Coordinates\", \n         \"Primary School\"),\n  \n  Format=c(\".csv\", \n           \".shp\",\n           \n           \".shp\", \n           \".shp\", \n           \".shp\", \n           \".shp\",\n           \".shp\", \n           \".shp\",\n           \".shp\",\n           \n           \".shp\",\n           \".kml\",\n           \".shp\",\n           \".shp\",\n           \".csv\"),\n  \n  Source=c(\"[data.gov.sg](https://data.gov.sg/dataset/resale-flat-prices)\",\n           \"[data.gov.sg](https://data.gov.sg/dataset/master-plan-2014-subzone-boundary-web)\",\n           \n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \"[OneMap API](https://www.onemap.gov.sg/docs/)\",\n           \n           \"[datamall.lta](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=bus%20stop)\",\n           \"[data.gov](https://data.gov.sg/dataset/lta-mrt-station-exit)\",\n           \"[Onemap.gov](https://www.onemap.gov.sg/main/v2/essentialamenities)\",\n           \"[Valery Lim's Github](https://github.com/ValaryLim/Mall-Coordinates-Web-Scraper/blob/master/mall_coordinates_updated.csv)\",\n           \"[data.gov](https://data.gov.sg/dataset/school-directory-and-information)\")\n  )\n\nlibrary(knitr)\nlibrary(kableExtra)\nkable(datasets, caption=\"Datasets Used\") %>%\n  kable_material(\"hover\", latex_options=\"scale_down\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-material lightable-hover\" style='font-family: \"Source Sans Pro\", helvetica, sans-serif; margin-left: auto; margin-right: auto;'>\n<caption>Datasets Used</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Type </th>\n   <th style=\"text-align:left;\"> Name </th>\n   <th style=\"text-align:left;\"> Format </th>\n   <th style=\"text-align:left;\"> Source </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Aspatial </td>\n   <td style=\"text-align:left;\"> Resale Flat Prices </td>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;\"> [data.gov.sg](https://data.gov.sg/dataset/resale-flat-prices) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial </td>\n   <td style=\"text-align:left;\"> Master Plan 2019 Subzone Boundary (Web) </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [data.gov.sg](https://data.gov.sg/dataset/master-plan-2014-subzone-boundary-web) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Childcare Services </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Eldercare Services </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Hawker Centres </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Kindergartens </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Parks </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Libraries </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Extracted </td>\n   <td style=\"text-align:left;\"> Sport Facilities </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [OneMap API](https://www.onemap.gov.sg/docs/) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Selfsourced </td>\n   <td style=\"text-align:left;\"> Bus Stop Locations Aug 2021 </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [datamall.lta](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=bus%20stop) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Selfsourced </td>\n   <td style=\"text-align:left;\"> MRT &amp; LRT Locations Aug 2021 </td>\n   <td style=\"text-align:left;\"> .kml </td>\n   <td style=\"text-align:left;\"> [data.gov](https://data.gov.sg/dataset/lta-mrt-station-exit) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Selfsourced </td>\n   <td style=\"text-align:left;\"> Supermarkets </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [Onemap.gov](https://www.onemap.gov.sg/main/v2/essentialamenities) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Selfsourced </td>\n   <td style=\"text-align:left;\"> Shopping Mall SVY21 Coordinates </td>\n   <td style=\"text-align:left;\"> .shp </td>\n   <td style=\"text-align:left;\"> [Valery Lim's Github](https://github.com/ValaryLim/Mall-Coordinates-Web-Scraper/blob/master/mall_coordinates_updated.csv) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Geospatial - Selfsourced </td>\n   <td style=\"text-align:left;\"> Primary School </td>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;\"> [data.gov](https://data.gov.sg/dataset/school-directory-and-information) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Aspatial data\n\nFor the purpose of this take-home exercise, [`HDB Resale Flat Prices`](https://data.gov.sg/dataset/resale-flat-prices) provided by Data.gov.sg should be used as the core data set.\n\nThe code chunk below reads the csv file into our R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale<-read_csv(\"data/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\nhead(resale,5)\n```\n:::\n\n\n#### Filtering to include transactional periods\n\nThe study should focus on either three-room, four-room or five-room flat and transaction period should be from 1st January 2021 to 31st December 2022. The test data should be January and February 2023 resale prices.\n\nTherefore, we filter the dataset to include transactions occuring from Jan 2021 to Feb 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# transaction period from 01-Jan-21 to 31-Feb-23\n# 4-room flats \nresale <- resale %>% \n  filter(flat_type == \"4 ROOM\") %>%\n  filter(month >= \"2021-01\" & month <= \"2022-12\" | month >= \"2023-01\" & month <= \"2023-02\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale$street_name <- gsub(\"ST\\\\.\", \"SAINT\", resale$street_name)\n```\n:::\n\n\n#### Creating function to get longitude and lattitude\n\nNotice that the data provided in the resale flat data does not include coordinates! We need to create our own geocoding function. With reference to our senior Megan's work once again, these are the steps required in creating a geocoding function\n\n1.  Combine the block and street name into an address\n\n2.  Pass the address as the searchVal in our query\n\n3.  Send the query to OneMapSG search *Note: Since we don\\'t need all the address details, we can set `getAddrDetails` as \\'N\\'*\n\n4.  Convert response (JSON object) to text\n\n5.  Save response in text form as a dataframe\n\n6.  We only need to retain the latitude and longitude for our output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(rjson)\ngeocode <- function(block, streetname) {\n  base_url <- \"https://developers.onemap.sg/commonapi/search\"\n  address <- paste(block, streetname, sep = \" \")\n  query <- list(\"searchVal\" = address, \n                \"returnGeom\" = \"Y\",\n                \"getAddrDetails\" = \"N\",\n                \"pageNum\" = \"1\")\n  \n  res <- GET(base_url, query = query)\n  restext<-content(res, as=\"text\")\n  \n  output <- fromJSON(restext)  %>% \n    as.data.frame %>%\n    select(results.LATITUDE, results.LONGITUDE)\n\n  return(output)\n}\n```\n:::\n\n\n#### Passing code through resale df\n\nWith our function in place, we then create a loop to implement the geocoding function through our transaction data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale$LATITUDE <- 0\nresale$LONGITUDE <- 0\n\nfor (i in 1:nrow(resale)){\n  temp_output <- geocode(resale[i, 4], resale[i, 5])\n  \n  resale$LATITUDE[i] <- temp_output$results.LATITUDE\n  resale$LONGITUDE[i] <- temp_output$results.LONGITUDE\n}\n```\n:::\n\n\n#### Save as an RDS object\n\nEspecially given the extensive dataframe, this would take quite long to load! to avoid having to reload the output again, we save this as a RDS object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(resale, file=\"resale\", compress=FALSE)\n```\n:::\n\n\nnow we can read the resale file easily\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale<-readRDS(\"resale\")\n```\n:::\n\n\n### Geospatial Data\n\nOur geospatial data can be split into several categories\n\n+-------------+-------------------------+------------------------------------------------------+-------------------------------------------------------+\n|             | Base                    | Extracted                                            | Sourced                                               |\n+=============+=========================+======================================================+=======================================================+\n| Description | geographical boundaries | Independent variable data extracted using OneMap API | Independent variable data extracted from the internet |\n+-------------+-------------------------+------------------------------------------------------+-------------------------------------------------------+\n| Layer names | 1.  MPSZ-2019           | childcare                                            | 1.  bus stop                                          |\n|             |                         |                                                      |                                                       |\n|             |                         | elder care                                           | 2.  shopping mall                                     |\n|             |                         |                                                      |                                                       |\n|             |                         | hawker centre                                        | 3.  supermarket                                       |\n|             |                         |                                                      |                                                       |\n|             |                         | kindergartens                                        | 4.  mrt                                               |\n|             |                         |                                                      |                                                       |\n|             |                         | parks                                                | 5.  primary school                                    |\n|             |                         |                                                      |                                                       |\n|             |                         | libraries                                            | 6.  good primary school                               |\n|             |                         |                                                      |                                                       |\n|             |                         | sport facilities                                     |                                                       |\n+-------------+-------------------------+------------------------------------------------------+-------------------------------------------------------+\n\nFeel free to explore the codes we used to extract the data in the different panels below!\n\n::: panel-tabset\n#### Extracted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(onemapsgapi)\n\n# extracting eldercare data as an sf object into R\neldercare<-get_theme(token,\"eldercare\")\neldercare.sf <- st_as_sf(eldercare, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = eldercare.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"eldercare\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting eldercare data as an sf object into R\nhawkercentre<-get_theme(token,\"hawkercentre\")\nhawkercentre.sf <- st_as_sf(hawkercentre, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = hawkercentre.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"hawkercentre\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting childcare data as an sf object into R\nchildcare<-get_theme(token,\"childcare\")\nchildcare.sf <- st_as_sf(childcare, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = childcare.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"childcare\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting kindergartens data as an sf object into R\nkindergartens<-get_theme(token,\"kindergartens\")\nkindergartens.sf <- st_as_sf(kindergartens, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = kindergartens.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"kindergartens\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting parks data as an sf object into R\nparks<-get_theme(token,\"nationalparks\")\nparks.sf <- st_as_sf(parks, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = parks.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"parks\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting library data as an sf object into R\nlibrary<-get_theme(token,\"libraries\")\nlibrary.sf <- st_as_sf(library, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = library.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"libraries\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n\nExtracting and sports facility data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsport<-get_theme(token,\"sportsg_sport_facilities\")\n\nsport\n```\n:::\n\n\n![](images/Screenshot%202023-03-11%20at%205.46.23%20PM.png)\n\nWhen we browse the sports data, we see that the lat and lng columns are not configured in the way we expect it to be. In the Lng column, the longitude of the location is first placed followed by a \"\\|\" and then the latitude of the location.\n\nNotice that the Lng and Lat are not in the format we want. We create a function to extract the Lng numbers from the string, using str_extract from the package stringr.\n\nnote the use of the following syntax\n\n-   \"\\\\\\\\d+\" extracts one or more digits that occur before the \\| character\n\n-   \"\\\\.?\" matches the decimal point occuring in lng records\n\n-   \"\\\\d\\*\" matches any digits that come after the decimal point\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlng.mutate<-function(df){\n  df |> \n    mutate(Lng=str_extract(Lng, \"\\\\d+\\\\.?\\\\d*\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting sports data as an sf object into R\nsport<-get_theme(token,\"sportsg_sport_facilities\")\nsport<-lng.mutate(sport)\n\nsport.sf <- st_as_sf(sport, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n# creating a saved sf object in data file for easy reference\nst_write(obj = sport.sf,\n         dsn = \"data/geospatial/extracted\",\n         layer = \"sportsg_sport_facilities\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n\n#### Sourced\n\n1.  Bus stop data Extracted from: [datamall.lta](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=bus%20stop)\n\n2.  Supermarkets extracted data from: [Onemap.gov](https://www.onemap.gov.sg/main/v2/essentialamenities)\n\n3.  Shopping mall data Extracted from: [ValeryLim's Github](https://github.com/ValaryLim/Mall-Coordinates-Web-Scraper/blob/master/mall_coordinates_updated.csv)\n\nsince it is in a csv file, we convert it into a shape file and save it into our extracted data file in the code chunk below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmall.df<- read.csv(\"data/geospatial/sourced/mall_coordinates_updated.csv\") |> \n  select(latitude, longitude, name) |> \n  dplyr::relocate(name)\n\nmall.sf <- st_as_sf(mall.df, coords=c(\"longitude\", \"latitude\"), crs=4326)\n\nst_write(obj = mall.sf,\n         dsn = \"data/geospatial/sourced\",\n         layer = \"shoppingmall\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n\n4.  Primary school data extracted from [data.gov](https://data.gov.sg/dataset/school-directory-and-information)\n\nSince only postal code and address data is given, we use the OneMapAPI in the code below to obtain coordinates of the schools.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprimarysch.df<- read.csv(\"data/geospatial/sourced/general-information-of-schools.csv\") |> \n  dplyr::filter(mainlevel_code==\"PRIMARY\") |> \n  dplyr::select(school_name, postal_code) |> \n  dplyr::mutate(postal_code=ifelse(nchar(as.character(postal_code)) == 5, \n                             paste0(\"0\", as.character(postal_code)), \n                             as.character(postal_code)))\n\n#use onemap api\nlibrary(httr)\nlibrary(rjson)\ngeocode.data.gov <- function(postalcode) {\n  base_url <- \"https://developers.onemap.sg/commonapi/search\"\n  query <- list(\"searchVal\" = postalcode, \n                \"returnGeom\" = \"Y\",\n                \"getAddrDetails\" = \"N\",\n                \"pageNum\" = \"1\")\n  \n  res <- GET(base_url, query = query)\n  restext<-content(res, as=\"text\")\n  \n  output <- fromJSON(restext) |>  \n    as.data.frame() |> \n    dplyr::select(results.LATITUDE, results.LONGITUDE)\n\n  return(output)\n}\n\n#create loop to run data through\nprimarysch.df$LATITUDE <- 0\nprimarysch.df$LONGITUDE <- 0\n\nfor (i in 1:nrow(primarysch.df)){\n  temp_output <- geocode.data.gov(primarysch.df[i, 2])\n  \n  primarysch.df$LATITUDE[i] <- temp_output$results.LATITUDE\n  primarysch.df$LONGITUDE[i] <- temp_output$results.LONGITUDE\n}\n\nprimarysch.sf <- st_as_sf(primarysch.df, coords=c(\"LONGITUDE\", \"LATITUDE\"), crs=4326)\n\nst_write(obj = primarysch.sf,\n         dsn = \"data/geospatial/sourced\",\n         layer = \"primarysch\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n\n5.  Good primary school - filtered from primarysch.sf\n\nBased on the rankings of [this website](https://schlah.com/primary-schools), we take the first 10 schools\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprimarysch.sf <- st_read(dsn = \"data/geospatial/sourced\", layer = \"primarysch\")\ngoodprimarysch.sf <- primarysch.sf |> \n  filter(school_name %in% c(\"NANYANG PRIMARY SCHOOL\",\n                            \"TAO NAN SCHOOL\",\n                            \"CANOSSA CATHOLIC PRIMARY SCHOOL\",\n                            \"NAN HUA PRIMARY SCHOOL\",\n                            \"ST. HILDA'S PRIMARY SCHOOL\",\n                            \"HENRY PARK PRIMARY SCHOOL\",\n                            \"ANGLO-CHINESE SCHOOL (PRIMARY)\",\n                            \"RAFFLES GIRLS' PRIMARY SCHOOL\",\n                            \"PEI HWA PRESBYTERIAN PRIMARY SCHOOL\"\n                            ))\n\nst_write(obj = goodprimarysch.sf,\n         dsn = \"data/geospatial/sourced\",\n         layer = \"goodprimarysch\",\n         driver = \"ESRI Shapefile\")\n```\n:::\n\n\n6.  Mrt data: retrieved from [data.gov](https://data.gov.sg/dataset/lta-mrt-station-exit)\n\nThe data given to us is in \".kml\" format, we convert it to an sf object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt.sf<-st_read(dsn= \"data/geospatial/sourced/lta-mrt-station-exit-kml.kml\") |> \n  st_zm()\n\nst_write(obj = mrt.sf,\n         dsn = \"data/geospatial/sourced\",\n         layer = \"mrt\",\n         driver = \"ESRI Shapefile\",\n         append = FALSE)\n```\n:::\n\n:::\n\n### Reading collected geospatial data into R\n\n::: panel-tabset\n#### Base\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz.sf <- st_read(dsn = \"data/geospatial/base\", layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/base' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XYZ\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n\n#### Extracted\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare.sf <- st_read(dsn = \"data/geospatial/extracted\", layer = \"eldercare\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `eldercare' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.7119 ymin: 1.271472 xmax: 103.9561 ymax: 1.439561\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nhawkercentre.sf <- st_read(dsn = \"data/geospatial/extracted\", layer = \"hawkercentre\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `hawkercentre' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 125 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nchildcare.sf<-  st_read(dsn = \"data/geospatial/extracted\", layer = \"childcare\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `childcare' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1925 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nkindergartens.sf<-  st_read(dsn = \"data/geospatial/extracted\", layer = \"kindergartens\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `kindergartens' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 448 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nparks.sf<-  st_read(dsn = \"data/geospatial/extracted\", layer = \"parks\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `parks' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 421 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nlibrary.sf<-  st_read(dsn = \"data/geospatial/extracted\", layer = \"libraries\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `libraries' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 31 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.7045 ymin: 1.263922 xmax: 103.9494 ymax: 1.448197\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nsport.sf<-  st_read(dsn = \"data/geospatial/extracted\", layer = \"sportsg_sport_facilities\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `sportsg_sport_facilities' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/extracted' \n  using driver `ESRI Shapefile'\nSimple feature collection with 35 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6937 ymin: 1.287668 xmax: 103.9524 ymax: 1.435755\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n#### Sourced\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop.sf <- st_read(dsn = \"data/geospatial/sourced\", layer = \"BusStop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/sourced' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nshoppingmall.sf<-st_read(dsn = \"data/geospatial/sourced\", layer = \"shoppingmall\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `shoppingmall' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/sourced' \n  using driver `ESRI Shapefile'\nSimple feature collection with 184 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6784 ymin: 1.263797 xmax: 103.9897 ymax: 1.448227\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nsupermarket.sf<-st_read(dsn = \"data/geospatial/sourced\", layer = \"SUPERMARKETS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `SUPERMARKETS' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/sourced' \n  using driver `ESRI Shapefile'\nSimple feature collection with 526 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4901.188 ymin: 25529.08 xmax: 46948.22 ymax: 49233.6\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nmrt.sf<-st_read(dsn = \"data/geospatial/sourced\", layer = \"mrt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mrt' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/sourced' \n  using driver `ESRI Shapefile'\nSimple feature collection with 474 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6368 ymin: 1.264972 xmax: 103.9893 ymax: 1.449157\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nprimarysch.sf<-st_read(dsn = \"data/geospatial/sourced\", layer = \"primarysch\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `primarysch' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/sourced' \n  using driver `ESRI Shapefile'\nSimple feature collection with 183 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.6878 ymin: 1.274958 xmax: 103.9628 ymax: 1.456608\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\ngoodprimarysch.sf<-st_read(dsn = \"data/geospatial/sourced\", layer = \"goodprimarysch\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `goodprimarysch' from data source \n  `/Users/pengyouyun/youyunpeng/IS415/Take-home_Ex/Take-home_Ex03/data/geospatial/sourced' \n  using driver `ESRI Shapefile'\nSimple feature collection with 9 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 103.7611 ymin: 1.305285 xmax: 103.937 ymax: 1.34968\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n:::\n\n### Data pre-processing\n\n#### **Removing unnecessary columns**\n\nFor locational factor dataframes, we only need to know the name of the facility and its geometry column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare.sf<-select(eldercare.sf, 1)\n\nhawkercentre.sf<-select(hawkercentre.sf, 1)\n\nchildcare.sf<-select(childcare.sf, 1)\n\nparks.sf<-select(parks.sf, 1)\n\nlibrary.sf<-select(library.sf, 1)\n\nsport.sf<-select(sport.sf, 1)\n\nshoppingmall.sf<-select(shoppingmall.sf, 1)\n\nbusstop.sf<-select(busstop.sf, 1)\n\nsupermarket.sf<- select(supermarket.sf, 1)\n\nprimarysch.sf<-select(primarysch.sf, 1)\n\ngoodprimarysch.sf<-select(goodprimarysch.sf, 1)\n\nmrt.sf<-select(mrt.sf, 1)\n```\n:::\n\n\n#### **Check for invalid geometries**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(eldercare.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(hawkercentre.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(childcare.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(kindergartens.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(parks.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(library.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(sport.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(busstop.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(shoppingmall.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(supermarket.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(primarysch.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(goodprimarysch.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(mrt.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlength(which(st_is_valid(mpsz.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nWe see that mpsz has 6 invalid geometries. Lets address them and check again\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz.sf <- st_make_valid(mpsz.sf)\nlength(which(st_is_valid(mpsz.sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n#### **Check for missing values**\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare.sf[rowSums(is.na(eldercare.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhawkercentre.sf[rowSums(is.na(hawkercentre.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare.sf[rowSums(is.na(childcare.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergartens.sf[rowSums(is.na(kindergartens.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 5 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     DESCRIP  ADDRESSP ADDRESSS ICON_NA  geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparks.sf[rowSums(is.na(parks.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary.sf[rowSums(is.na(library.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsport.sf[rowSums(is.na(sport.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] NAME     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop.sf[rowSums(is.na(busstop.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21\n[1] BUS_STOP_N geometry  \n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshoppingmall.sf[rowSums(is.na(shoppingmall.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] name     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket.sf[rowSums(is.na(supermarket.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21\n[1] LIC_NAME geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprimarysch.sf[rowSums(is.na(primarysch.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] schl_nm  geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoodprimarysch.sf[rowSums(is.na(goodprimarysch.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] schl_nm  geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt.sf[rowSums(is.na(mrt.sf))!=0,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] Name     geometry\n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\n### Verifying + Transforming Coordinate system\n\n::: panel-tabset\n#### Base\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\n#### Extracted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(eldercare.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(hawkercentre.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(childcare.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(kindergartens.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(parks.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(library.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(sport.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\n#### Sourced\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(busstop.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(shoppingmall.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(supermarket.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(primarysch.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(goodprimarysch.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(mrt.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\nNote: our projected CRS should be SVY21 (EPSG code 3414). However, some of the extracted data sets are in WGS84, and others are in SVY21 with the incorrect EPSG code (EPSG 9001)\n:::\n\n### Transforming CRS\n\nWith the invalid geometries found earlier, we use the functions st_set_crs() and st_transform() to correct them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#st_set_crs() assigns proper EPSG code\nbusstop.sf<-st_set_crs(busstop.sf, 3414)\nsupermarket.sf<-st_set_crs(supermarket.sf, 3414)\n\n#st_transform() changes CRS from one to another\neldercare.sf<-st_transform(eldercare.sf, crs=3414)\nhawkercentre.sf<-st_transform(hawkercentre.sf, crs=3414)\nchildcare.sf<-st_transform(childcare.sf, crs=3414)\nkindergartens.sf<-st_transform(kindergartens.sf, crs=3414)\nparks.sf<-st_transform(parks.sf, crs=3414)\nlibrary.sf<-st_transform(library.sf, crs=3414)\nsport.sf<-st_transform(sport.sf, crs=3414)\nshoppingmall.sf<-st_transform(shoppingmall.sf, crs=3414)\nprimarysch.sf<-st_transform(primarysch.sf, crs=3414)\ngoodprimarysch.sf<-st_transform(goodprimarysch.sf, crs=3414)\nmrt.sf<-st_transform(mrt.sf, crs=3414)\n```\n:::\n\n\n### Checking crs\n\nSubsequently, we check again to make sure the data is in the proper CRS.\n\n::: panel-tabset\n#### Base\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\n#### Extracted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(eldercare.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(hawkercentre.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(childcare.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(kindergartens.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(parks.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(library.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(sport.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\n#### Sourced\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(busstop.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(shoppingmall.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(supermarket.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(primarysch.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(goodprimarysch.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n\n```{.r .cell-code}\nst_crs(mrt.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n:::\n\n## Exploratory Data Analysis\n\nLets do a quick EDA for the data we collected!\n\n::: panel-tabset\n### Transportation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#transport graph\ntmap_mode(\"plot\")\ntm_shape(mpsz.sf) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(busstop.sf) +\n  tm_dots(col=\"red\", size=0.05, alpha=0.5) +\ntm_shape(mrt.sf) +\n  tm_dots(col=\"green\", alpha=1)+\n  tm_layout(main.title = \"Transportation\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n### Education\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#education\ntmap_mode(\"plot\")\ntm_shape(mpsz.sf) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(primarysch.sf) +\n  tm_dots(col=\"pink\", size=0.05, alpha=0.5) +\ntm_shape(goodprimarysch.sf) +\n  tm_dots(col=\"red\", size=0.05, alpha=1) +\ntm_shape(kindergartens.sf) +\n  tm_dots(col=\"purple\", size=0.05, alpha=0.5) +\ntm_shape(childcare.sf) +\n  tm_dots(col=\"yellow\", size=0.05, alpha=0.2) +\n  tm_layout(main.title = \"Education\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n### Amenities\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ammenities\ntmap_mode(\"plot\")\ntm_shape(mpsz.sf) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(parks.sf) +\n  tm_dots(col=\"green\", size=0.05, alpha=0.5) +\ntm_shape(hawkercentre.sf) +\n  tm_dots(col=\"blue\", size=0.05, alpha=0.5) +\ntm_shape(library.sf) +\n  tm_dots(col=\"red\", size=0.05, alpha=0.5) +\ntm_shape(sport.sf) +\n  tm_dots(col=\"grey\", size=0.05, alpha=0.2) +\ntm_shape(shoppingmall.sf) +\n  tm_dots(col=\"purple\", size=0.05, alpha=0.2) +\ntm_shape(supermarket.sf) +\n  tm_dots(col=\"brown\", size=0.05, alpha=0.2) +\ntm_shape(eldercare.sf) +\n  tm_dots(col=\"navy\", size=0.05, alpha=0.2) +\n  tm_layout(main.title = \"Ammenities\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n:::\n\n## Data Wrangling\n\n### Structural Factors\n\nThis includes the inherent structural factors of the flats, including Area, Floor Level and Lease Remaining years.\n\n#### Floor Level - create as ordinal\n\nTo simplify analysis, we create the an ordinal column for the floor level variable. This code chunk matches the story levels to the list, and gives it an ordinal value based on its relative positioning in the list given (1 would be allocated to \"01 TO 03\", 2 allocated to \"04 TO 06\"....).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the story levels and ordinal values \nstory_levels <- c(\"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15\", \"16 TO 18\", \"19 TO 21\", \"22 TO 24\", \"25 TO 27\", \"28 TO 30\", \"31 TO 33\", \"34 TO 36\", \"37 TO 39\", \"40 TO 42\", \"43 TO 45\", \"46 TO 48\", \"49 TO 51\") \nstory_ordinal <- seq_along(story_levels)  # Create the ordinal variable based on the story column \nresale$Story_Ordinal <- story_ordinal[match(resale$storey_range, story_levels)]  # Set the labels for the ordinal variable \nlevels(resale$Story_Ordinal) <- story_levels\n\n# Lastly, we mutate the ordinal variable as a numeric\nresale<- resale |> \n  mutate(Story_Ordinal=as.numeric(Story_Ordinal))\n```\n:::\n\n\n#### Remaining lease - mutate to years\n\nThe code chunk below seeks to convert the remaining lease period to in terms of years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_list <- str_split(resale$remaining_lease, \" \")\n\nfor (i in 1:length(str_list)) {\n  if (length(unlist(str_list[i])) > 2) {\n      year <- as.numeric(unlist(str_list[i])[1])\n      month <- as.numeric(unlist(str_list[i])[3])\n      resale$remaining_lease[i] <- year + round(month/12, 2)\n  }\n  else {\n    year <- as.numeric(unlist(str_list[i])[1])\n    resale$remaining_lease[i] <- year\n  }\n}\n```\n:::\n\n\n### Locational Factors\n\nThis includes factors that concern location of amenities to the flat in question. For instance, Proximity to CBD or number of primary schools withi 350 m from the flat in question.\n\n#### CBD Location\n\nWe need to factor in the proximity to CBD in the downtown core. As such let's take the coordinates of Downtown Core to be the coordinates of the CBD\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlat <- 1.287953\nlng <- 103.851784\n\ncbd.sf <- data.frame(lat, lng) %>%\n  st_as_sf(coords = c(\"lng\", \"lat\"), crs=4326) %>%\n  st_transform(crs=3414)\n```\n:::\n\n\n#### Proximity Distance Calculation\n\n##### Converting resale df into sf object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale.sf <- st_as_sf(resale, \n                      coords = c(\"LONGITUDE\", \n                                 \"LATITUDE\"), \n                      crs=4326) %>%\n  #afterwards, we transform it to SVY21, our desired CRS\n  st_transform(crs = 3414)\n```\n:::\n\n\nOne of the things we need to find is the proximity to particular facilities - which we can compute with st_distance(), and find the closest facility (shortest distance) with the rowMins() function of our matrixStats package. The values will be appended to the data frame as a new column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(units)\nlibrary(matrixStats)\nproximity <- function(df1, df2, varname) {\n  dist_matrix <- st_distance(df1, df2) |> \n    drop_units()\n  df1[,varname] <- rowMins(dist_matrix)\n  return(df1)\n}\n```\n:::\n\n\n##### Implementation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale.sf <- \n  proximity(resale.sf, cbd.sf, \"PROX_CBD\")\n\nresale.sf <- \n  proximity(resale.sf, eldercare.sf, \"PROX_ELDERCARE\")\n\nresale.sf <- \n  proximity(resale.sf, hawkercentre.sf, \"PROX_HAWKERCENTRE\")\n\nresale.sf <- \n  proximity(resale.sf, childcare.sf, \"PROX_CHILDCARE\")\n\nresale.sf <- \n  proximity(resale.sf, kindergartens.sf, \"PROX_KINDERGARTEN\")\n\nresale.sf <- \n  proximity(resale.sf, parks.sf, \"PROX_PARK\")\n\nresale.sf <- \n  proximity(resale.sf, library.sf, \"PROX_LIBRARY\")\n\nresale.sf <- \n  proximity(resale.sf, sport.sf, \"PROX_SPORT\")\n\nresale.sf <- \n  proximity(resale.sf, busstop.sf, \"PROX_BUSSTOP\")\n\nresale.sf <- \n  proximity(resale.sf, shoppingmall.sf, \"PROX_SHOPPINGMALL\")\n\nresale.sf <- \n  proximity(resale.sf, supermarket.sf, \"PROX_SUPERMARKET\")\n\nresale.sf <- \n  proximity(resale.sf, primarysch.sf, \"PROX_PRIMARYSCH\")\n\nresale.sf <- \n  proximity(resale.sf, goodprimarysch.sf, \"PROX_GOODPRIMARYSCH\")\n\nresale.sf <- \n  proximity(resale.sf, mrt.sf, \"PROX_MRT\")\n```\n:::\n\n\n#### Facility Count within radius calculation\n\nBesides proximity, which calculates the shortest distance, we also want to find the number of facilities within a particular radius.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_radius <- function(df1, df2, varname, radius) {\n  dist_matrix <- st_distance(df1, df2) %>%\n    drop_units() %>%\n    as.data.frame()\n  df1[,varname] <- rowSums(dist_matrix <= radius)\n  return(df1)\n}\n```\n:::\n\n\n##### Implementation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale.sf <- \n  num_radius(resale.sf, busstop.sf, \"NUM_BUSSTOP\", 350)\n  \nresale.sf <-\n  num_radius(resale.sf, childcare.sf, \"NUM_CHILDCARE\", 350)\n\nresale.sf <-\n  num_radius(resale.sf, kindergartens.sf, \"NUM_KINDERGARTEN\", 350)\n\nresale.sf <-\n  num_radius(resale.sf, primarysch.sf, \"NUM_PRIMARYSCH\", 1000)\n```\n:::\n\n\n#### Saving Resale.sf as a rds file\n\nWe are finally done with the inclusion of our prox and num variables. Some final changes to the sf dataframe includes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(resale.sf, \"data/model/resale.sf.rds\")\n```\n:::\n\n\n#### Reading rds file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale.sf<-read_rds(\"data/model/resale.sf.rds\")\n\nresale.sf<-resale.sf |> \n  mutate(LEASE_YRS=as.double(LEASE_YRS))\n```\n:::\n\n\n## Regressions\n\n### Data Preparation\n\n#### Building a correlation matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_nogeo <- resale.sf |> \n  st_drop_geometry() |> \n  select_if(is.numeric) |> \n  select(-PRICE)\ncorrplot::corrplot(cor(resale_nogeo), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\nWe realise that the variables \"lease_commence_date\" which is the beginning year of lease, and \"LEASE_YRS\" which is the number of years left in the lease, are perfectly collinear with a correlation coeffecient of 1. We choose to drop \"lease_commence_date\" to avoid the problem of perfect collinearity. This creates our final resale df (\"resale_final\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_final <- resale.sf |> \n  select(-lease_commence_date)\n```\n:::\n\n\n#### Splitting data into test and training set\n\nFrom the assignment brief, our training data consists of transactions that occurred from 1st January 2021 to 31st December 2022, while test data occurred from January and February 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data<-resale_final |> \n  filter(month >= \"2021-01\" & month <= \"2022-12\")\n\ntest_data<-resale_final |> \n  filter(month >= \"2023-01\" & month <= \"2023-02\")\n```\n:::\n\n\n### Building a non spatial multiple linear regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr<- lm(PRICE~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + NUM_PRIMARYSCH, data=train_data)\n#removed flat type given that we only consider 4 room flats\n#remove geographical variables given GWR\n#removed month <- questionable interpretability of coefficient (if generated)\n\nsummary(price_mlr)\n\n# saving the result as an rds object\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\")\n```\n:::\n\n\nWe can read the output below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr_summary<-read_rds(\"data/model/price_mlr.rds\")\nprice_mlr_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = PRICE ~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + \n    PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + \n    PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + \n    PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + \n    NUM_PRIMARYSCH, data = train_data)\n\nCoefficients:\n        (Intercept)        Story_Ordinal            LEASE_YRS  \n          8.701e+04            1.606e+04            4.435e+03  \n           AREA_SQM             PROX_CBD       PROX_ELDERCARE  \n          3.552e+03           -1.631e+01           -8.064e+00  \n  PROX_HAWKERCENTRE            PROX_PARK         PROX_LIBRARY  \n         -2.115e+01            6.458e+00           -2.693e+01  \n         PROX_SPORT         PROX_BUSSTOP    PROX_SHOPPINGMALL  \n          2.054e+00           -1.732e+01           -1.261e+01  \n   PROX_SUPERMARKET  PROX_GOODPRIMARYSCH             PROX_MRT  \n          1.088e+01           -3.043e-01           -1.519e+01  \n      NUM_CHILDCARE     NUM_KINDERGARTEN       NUM_PRIMARYSCH  \n         -2.821e+03            7.866e+03           -1.098e+04  \n```\n:::\n:::\n\n\n### GWR predictive method\n\ngwr method will be used to calibrate a model to predict the HDB resale prices\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp<- sf::as_Spatial(train_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 23656 \nextent      : 11519.79, 42645.18, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 29\nnames       :   PRICE,   month,       town, flat_type, block,   street_name, storey_range, AREA_SQM,    flat_model, LEASE_YRS, Story_Ordinal,         PROX_CBD,      PROX_ELDERCARE, PROX_HAWKERCENTRE,      PROX_CHILDCARE, ... \nmin values  :  250000, 2021-01, ANG MO KIO,    4 ROOM,     1,  ADMIRALTY DR,     01 TO 03,       70, Adjoined flat,      44.5,             1, 999.393538715878, 1.9938461723793e-05,  30.6031805185926, 1.4128908036435e-05, ... \nmax values  : 1370000, 2022-12,     YISHUN,    4 ROOM,    9B, YUNG SHENG RD,     49 TO 51,      145,       Type S1,     97.33,            17, 19650.0691667807,    3301.63731683139,  2867.63031236184,    547.386819517238, ... \n```\n:::\n:::\n\n\n#### Computing adaptive bandwidth\n\nNext, bw.gwr() of GWmodel package will be used to determine the optimal bandwidth to be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(PRICE~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + NUM_PRIMARYSCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\n# saving the result as an rds object\nwrite_rds(bw_adaptive, \"data/model/bw_adaptive.rds\")\n```\n:::\n\n\nThe code below can be used to display the model output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/model/bw_adaptive.rds\")\n```\n:::\n\n\n#### Constructing gwr model\n\nForming model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = PRICE~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + NUM_PRIMARYSCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\n# saving the result as an rds object\nwrite_rds(gwr_adaptive, \"data/model/gwr_adaptive.rds\")\n```\n:::\n\n\nThe code below can be used to display the model output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- read_rds(\"data/model/gwr_adaptive.rds\")\n```\n:::\n\n\n### Preparing coordinates data\n\n#### Extracting coordinates data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords<-st_coordinates(resale_final)\ncoords_train<-st_coordinates(train_data)\ncoords_test<-st_coordinates(test_data)\n```\n:::\n\n\nSave into rds\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords_train, \"data/model/coords_train.rds\")\nwrite_rds(coords_test, \"data/model/coords_test.rds\")\n```\n:::\n\n\nRead RDS\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train<-read_rds(\"data/model/coords_train.rds\")\ncoords_test<-read_rds(\"data/model/coords_test.rds\")\n```\n:::\n\n\n#### Dropping geometry field\n\nDrop geometry column of the sf dataframe by using st_drop_geometry()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data<-train_data |> \n  st_drop_geometry()\n```\n:::\n\n\n### Calibrating Random Forest Model\n\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using random forest function of ranger package.\n\n#### forming model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234) \nrf<- ranger(PRICE~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + NUM_PRIMARYSCH, data=train_data)\n\nsummary(rf)\n\n# saving the result as an rds object\nwrite_rds(rf, \"data/model/rf.rds\")\n```\n:::\n\n\nread RDS object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf<-read_rds(\"data/model/rf.rds\")\nprint(rf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRanger result\n\nCall:\n ranger(PRICE ~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD +      PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY +      PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET +      PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN +      NUM_PRIMARYSCH, data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      23656 \nNumber of independent variables:  17 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1051737948 \nR squared (OOB):                  0.9372898 \n```\n:::\n:::\n\n\n### Calibrating Geographic random forest using grf\n\n#### Computing bandwidth for grf\n\nMinimise trees to trees=50 for ease of computation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# determining bandwidth for model\nbw_grf_adaptive<-grf.bw(formula = PRICE~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + NUM_PRIMARYSCH, dataset = train_data, kernel = \"adaptive\", coords = coords_train, trees=10)\n\n# saving the result as an rds object\nwrite_rds(bw_grf_adaptive, \"data/model/bw_grf_adaptive.rds\")\n```\n:::\n\n\nread RDS object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_grf_adaptive<-read_rds(\"data/model/bw_grf_adaptive.rds\")\n```\n:::\n\n\n#### Generating model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive<-grf(formula = PRICE~ Story_Ordinal + LEASE_YRS + AREA_SQM + PROX_CBD + PROX_ELDERCARE + PROX_HAWKERCENTRE + PROX_PARK + PROX_LIBRARY + PROX_SPORT + PROX_BUSSTOP + PROX_SHOPPINGMALL + PROX_SUPERMARKET + PROX_GOODPRIMARYSCH + PROX_MRT + NUM_CHILDCARE + NUM_KINDERGARTEN + NUM_PRIMARYSCH,\n                   dframe=train_data,\n                   bw=bw_grf_adaptive, # need to know how to calculate using function\n                   kernel=\"adaptive\",\n                   coords=coords_train,\n                   ntree=10)\n\n# saving the result as an rds object\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive<-read_rds(\"data/model/gwRF_adaptive.rds\")\ngwRF_adaptive\n```\n:::\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}